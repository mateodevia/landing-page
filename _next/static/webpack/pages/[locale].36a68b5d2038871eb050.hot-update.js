webpackHotUpdate_N_E("pages/[locale]",{

/***/ "./components/SkillsGraph/GraphGenerator.js":
/*!**************************************************!*\
  !*** ./components/SkillsGraph/GraphGenerator.js ***!
  \**************************************************/
/*! exports provided: runForceGraph */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"runForceGraph\", function() { return runForceGraph; });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/index.js\");\n/* harmony import */ var _fortawesome_fontawesome_free_css_all_min_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @fortawesome/fontawesome-free/css/all.min.css */ \"./node_modules/@fortawesome/fontawesome-free/css/all.min.css\");\n/* harmony import */ var _fortawesome_fontawesome_free_css_all_min_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_fortawesome_fontawesome_free_css_all_min_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _forceGraph_module_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./forceGraph.module.css */ \"./components/SkillsGraph/forceGraph.module.css\");\n/* harmony import */ var _forceGraph_module_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_forceGraph_module_css__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nfunction runForceGraph(container, linksData, nodesData, nodeHoverTooltip, mediumBreakPoint, smallBreakpoint) {\n  var links = linksData.map(function (d) {\n    return Object.assign({}, d);\n  });\n  var nodes = nodesData.map(function (d) {\n    return Object.assign({}, d);\n  });\n  var containerRect = container.getBoundingClientRect();\n  var height = containerRect.height;\n  var width = containerRect.width;\n  var medium = smallBreakpoint < width && width < mediumBreakPoint;\n  var small = width < smallBreakpoint;\n\n  var color = function color(d) {\n    return d.color;\n  };\n\n  var getClass = function getClass(d) {\n    return _forceGraph_module_css__WEBPACK_IMPORTED_MODULE_2___default.a[\"text\" + d.text];\n  };\n\n  var getRadius = function getRadius(d) {\n    var resizeFactor = 1;\n\n    if (medium) {\n      resizeFactor = 0.8;\n    } else if (small) {\n      resizeFactor = 0.7;\n    }\n\n    return d.size * resizeFactor / 2;\n  };\n\n  var getDistance = function getDistance(l) {\n    var circleSpace = getRadius(l.source) + getRadius(l.target);\n    var resizeFactor = 1;\n\n    if (medium) {\n      resizeFactor = 0.8;\n    } else if (small) {\n      resizeFactor = 0.2;\n    }\n\n    return l.value * resizeFactor + circleSpace;\n  };\n\n  var getCollision = function getCollision(d) {\n    var extraSpace = 5;\n\n    if (medium) {\n      extraSpace = 10;\n    } else if (small) {\n      extraSpace = 12;\n    }\n\n    return getRadius(d) + extraSpace;\n  };\n\n  var drag = function drag(simulation) {\n    var dragstarted = function dragstarted(e, d) {\n      if (!e.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    };\n\n    var dragged = function dragged(e, d) {\n      d.fx = e.x;\n      d.fy = e.y;\n    };\n\n    var dragended = function dragended(e, d) {\n      if (!e.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    };\n\n    return d3__WEBPACK_IMPORTED_MODULE_0__[\"drag\"]().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n  }; // Add the tooltip element to the graph\n\n\n  var tooltip = document.querySelector(\"#graph-tooltip\");\n\n  if (!tooltip) {\n    var tooltipDiv = document.createElement(\"div\");\n    tooltipDiv.classList.add(_forceGraph_module_css__WEBPACK_IMPORTED_MODULE_2___default.a.tooltip);\n    tooltipDiv.style.opacity = \"0\";\n    tooltipDiv.id = \"graph-tooltip\";\n    document.body.appendChild(tooltipDiv);\n  }\n\n  var div = d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](\"#graph-tooltip\");\n\n  var addTooltip = function addTooltip(hoverTooltip, d, x, y) {\n    div.transition().duration(200).style(\"opacity\", 0.9);\n    div.html(hoverTooltip(d)).style(\"background-color\", \"grey\").style(\"color\", \"white\").style(\"left\", \"\".concat(x, \"px\")).style(\"top\", \"\".concat(y - 28, \"px\"));\n  };\n\n  var removeTooltip = function removeTooltip() {\n    div.transition().duration(200).style(\"opacity\", 0);\n  };\n\n  var simulation = d3__WEBPACK_IMPORTED_MODULE_0__[\"forceSimulation\"](nodes).force(\"link\", d3__WEBPACK_IMPORTED_MODULE_0__[\"forceLink\"](links).id(function (d) {\n    return d.id;\n  }).strength(3).distance(getDistance)).force(\"charge\", d3__WEBPACK_IMPORTED_MODULE_0__[\"forceManyBody\"]()).force(\"collision\", d3__WEBPACK_IMPORTED_MODULE_0__[\"forceCollide\"]().radius(getCollision)).force(\"center\", d3__WEBPACK_IMPORTED_MODULE_0__[\"forceCenter\"](0, 0));\n  var clusters = {\n    0: 0,\n    1: -width / 2,\n    2: width / 2\n  };\n  simulation.force(\"x\", d3__WEBPACK_IMPORTED_MODULE_0__[\"forceX\"]().x(function (d) {\n    return clusters[d.cluster];\n  }));\n  var svg = d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](container).append(\"svg\").attr(\"viewBox\", [-width / 2, -height / 2, width, height]);\n  var link = svg.append(\"g\").attr(\"stroke\", \"#999\").attr(\"stroke-opacity\", 0.6).selectAll(\"line\").data(links).join(\"line\").attr(\"stroke-width\", 2);\n  var node = svg.append(\"g\").attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 2).attr(\"class\", _forceGraph_module_css__WEBPACK_IMPORTED_MODULE_2___default.a.skills_node).selectAll(\"circle\").data(nodes).join(\"circle\").attr(\"r\", getRadius).attr(\"fill\", color).call(drag(simulation));\n  var label = svg.append(\"g\").selectAll(\"text\").data(nodes.filter(function (n) {\n    return n.type === \"subject\";\n  })).enter().append(\"foreignObject\");\n  label.attr(\"width\", function (d) {\n    return getRadius(d) * 2;\n  }).attr(\"height\", function (d) {\n    return getRadius(d) * 2;\n  }).append(\"xhtml:div\").attr(\"class\", \"flexbox \".concat(_forceGraph_module_css__WEBPACK_IMPORTED_MODULE_2___default.a.subject_container)).html(function (d) {\n    return \"<div class=\\\"\".concat(_forceGraph_module_css__WEBPACK_IMPORTED_MODULE_2___default.a.subject_label, \" \").concat(getClass(d), \"\\\">\").concat(d.id, \"</div>\");\n  }).call(drag(simulation));\n  var icon = svg.append(\"g\").attr(\"class\", _forceGraph_module_css__WEBPACK_IMPORTED_MODULE_2___default.a.skills_icon).selectAll(\"text\").data(nodes.filter(function (n) {\n    return n.type === \"tool\";\n  })).enter().append(\"svg:image\").attr(\"xlink:href\", function (d) {\n    return d.icon;\n  }).attr(\"height\", function (d) {\n    return getRadius(d) * 2 * 0.6;\n  }).attr(\"width\", function (d) {\n    return getRadius(d) * 2 * 0.6;\n  }).call(drag(simulation));\n  icon.on(\"mouseover\", function (e, d) {\n    addTooltip(nodeHoverTooltip, d, e.pageX, e.pageY);\n  }).on(\"mouseout\", function () {\n    removeTooltip();\n  });\n\n  var validateX = function validateX(d) {\n    var lowerLimmit = -width / 2 + getRadius(d);\n    var upperLimmit = width / 2 - getRadius(d);\n\n    if (lowerLimmit < d.x && d.x < upperLimmit) {\n      return d.x;\n    } else {\n      return d.x > 0 ? upperLimmit : lowerLimmit;\n    }\n  };\n\n  var validateY = function validateY(d) {\n    var lowerLimmit = -height / 2 + getRadius(d);\n    var upperLimmit = height / 2 - getRadius(d);\n\n    if (lowerLimmit < d.y && d.y < upperLimmit) {\n      return d.y;\n    } else {\n      return d.y > 0 ? upperLimmit : lowerLimmit;\n    }\n  };\n\n  simulation.on(\"tick\", function () {\n    // update node positions\n    node.attr(\"cx\", validateX).attr(\"cy\", validateY); //update link positions\n\n    link.attr(\"x1\", function (d) {\n      return validateX({\n        x: d.source.x,\n        size: d.source.size\n      });\n    }).attr(\"y1\", function (d) {\n      return validateY({\n        y: d.source.y,\n        size: d.source.size\n      });\n    }).attr(\"x2\", function (d) {\n      return validateX({\n        x: d.target.x,\n        size: d.target.size\n      });\n    }).attr(\"y2\", function (d) {\n      return validateY({\n        y: d.target.y,\n        size: d.target.size\n      });\n    }); // update label positions\n\n    label.attr(\"x\", function (d) {\n      return validateX(d) - getRadius(d);\n    }).attr(\"y\", function (d) {\n      return validateY(d) - getRadius(d);\n    }); // update icon positions\n\n    icon.attr(\"x\", function (d) {\n      return validateX(d) - getRadius(d) * 0.6;\n    }).attr(\"y\", function (d) {\n      return validateY(d) - getRadius(d) * 0.6;\n    });\n  });\n  return {\n    destroy: function destroy() {\n      simulation.stop();\n    },\n    nodes: function nodes() {\n      return svg.node();\n    },\n    move: function move() {\n      simulation.alpha(0.4);\n      simulation.restart();\n    }\n  };\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/SkillsGraph/GraphGenerator.js\n");

/***/ })

})